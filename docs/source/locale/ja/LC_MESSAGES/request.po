# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Masashi Shibata
# This file is distributed under the same license as the devwebframework
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr " "

#: ../../source/request.rst:2
msgid "リクエストオブジェクト"
msgstr "&quot;Request object"

#: ../../source/request.rst:5
msgid "リクエストに関する情報の扱いについて"
msgstr "&quot;About handling information on requests"

#: ../../source/request.rst:7
msgid ""
"次はリクエスト情報の扱い方について考えてみましょう。 "
"クライアントのリクエストに関する情報はWSGIアプリケーションの第一引数に辞書型のオブジェクトとして渡されることはすでに解説しました。 "
"ルーティングに必要なリクエストのHTTPメソッドやURLパスは、次のようにこのオブジェクトから取り出す必要があります。"
msgstr "Let&#39;s think about how to handle request information. We already explained that information on client requests is passed as a dictionary type object to the first argument of the WSGI application. The HTTP method and URL path of the request required for routing must be retrieved from this object as follows."

#: ../../source/request.rst:16
msgid "また他にも様々な情報が格納されていて、例えばHTTPリクエストボディを取り出したい際には、次のように記述します。"
msgstr "&quot;In addition, if various information is stored and you want to retrieve an HTTP request body, for example, it is written as follows."

#: ../../source/request.rst:23
msgid ""
"辞書型オブジェクトから ``CONTENT_LENGTH`` と ``wsgi.input`` を取り出します。 "
"``env[\"CONTENT_LENGTH\"]`` には、クライアントがHTTPヘッダー ``Content-Length`` "
"で指定したレスポンスボディの長さが格納されています。 レスポンスボディはファイルオブジェクトになっているので、 ``Content-"
"Length`` の長さ分 ``read()`` して上げる必要があります。 リクエストボディを取り出すだけでも少し大変なように思います。"
msgstr "We retrieve `` CONTENT_LENGTH`` and `` wsgi.input`` from a dictionary object. `` env [\ &quot;CONTENT_LENGTH \&quot;] `` contains the length of the response body specified by the client in the HTTP header `` Content-Length``. Since the response body is a file object, it needs to be raised by `` read () `` for the length of `` Content-Length``. I think that it is a little hard just to retrieve the request body."

#: ../../source/request.rst:28
msgid ""
"これらをうまくラップして使いやすくしてくれるクラスがあれば便利です。 "
"ほとんどのWSGIフレームワークがこれをラップした「リクエストオブジェクト」を提供します。 このフレームワークにも同様に ``Request`` "
"クラスを定義してみましょう。"
msgstr "It is useful if you have a class that will make these easy to wrap and make it easy to use. Most WSGI frameworks provide &quot;request objects&quot; that wrap this. Let&#39;s define the `` Request`` class in this framework as well."

#: ../../source/request.rst:34
msgid "WSGI Environオブジェクトをラップする"
msgstr "&quot;Wrap the WSGI Environ object"

#: ../../source/request.rst:36
msgid ""
"リクエストオブジェクトがどういうものかというと、WSGIのEnvironをラップしたクラスのオブジェクトです。 WSGI "
"Environに格納されている様々なリクエスト情報をシンプルなAPIで取り出せるよう、 プロパティメソッドが定義された ``Response`` "
"クラスを用意します。"
msgstr "What the request object is, it is an object of a class that wraps environ of WSGI. Prepare a `` Response`` class that defines property methods so that various request information stored in WSGI Environ can be retrieved with a simple API."

#: ../../source/request.rst:62
msgid ""
"WSGI Environには様々な情報が格納されていますが、まずは3つだけプロパティメソッドを定義してみました。 この ``Request`` "
"クラスのオブジェクトを渡してあげれば、フレームワークの利用者は ``body`` "
"プロパティにアクセスするだけで、リクエストボディの情報を取得できます。 "
"実際にはここであげた他にもたくさんの情報が詰まっているので、必要に応じて拡張していく必要がありますが基本的な考え方はこれだけです。 "
"次はアプリケーションに組み込んでみましょう。"
msgstr "Various information is stored in WSGI Environ, but first we have defined only three property methods. If you pass this object of the `` Request`` class, the framework user can get the information of the request body simply by accessing the `` body`` property. Actually, as there are plenty of other information in addition to what I gave here, it is necessary to expand as necessary, but this is the only basic way of thinking. Let&#39;s incorporate it into the application next time."

#: ../../source/request.rst:69
msgid "アプリケーションに組み込む"
msgstr "&quot;Built in application"

#: ../../source/request.rst:71
msgid "各関数には、WSGI Environの代わりに ``Request(env)`` を渡すように書き換えてみましょう。"
msgstr "&quot;Let&#39;s rewrite each function to pass` `Request (env)` `instead of WSGI Environ."

#: ../../source/request.rst:84
msgid "これで ``Request`` クラスのオブジェクトが各関数に渡せるようになりました。 アプリケーション側のインターフェイスは次のようになります。"
msgstr "&quot;Now you can pass objects of the` `Request`` class to each function, the application side interface looks like this:"

#: ../../source/request.rst:94
msgid ""
"リクエストボディの文字コードをすべて ``utf-8`` として扱っている点には改善の余地があります。 実際には ``Content-Type``"
" ヘッダーなどで指定されている ``charset`` を確認してあげるといいでしょう。 "
"とはいえひとまず、フレームワークの利用者は簡単にリクエストボディにアクセスできるようになりました。 既存のアプリケーションを書き換えてみます。"
msgstr "There is room for improvement in that all character codes of the request body are treated as `` utf - 8``. In fact it&#39;s a good idea to check `` charset`` which is specified in the `` Content-Type`` header. Nonetheless, users of the framework can now easily access the request body. Let&#39;s rewrite the existing application."

#: ../../source/request.rst:104
msgid "リクエストオブジェクトを拡張していく"
msgstr "&quot;Extend the request object"

#: ../../source/request.rst:106
msgid ""
"せっかくなのでもう少し他の情報にアクセスできるようにしておきましょう。 WSGI "
"Environに入っているすべての情報をラップすることはここではしませんが、次に挙げる項目は利用頻度が高いため、プロパティメソッドが定義されていると便利かと思います。"
msgstr "Let&#39;s make it much more accessible to other information. Wrapping all the information contained in WSGI Environ is not done here, but since the following items are used frequently, I think that it is useful if property methods are defined."

#: ../../source/request.rst:109
msgid "`query` プロパティ: URLのクエリパラメーターを手軽に取り出したい"
msgstr "&quot;` query` property: I want to retrieve query parameters of URL easily"

#: ../../source/request.rst:110
msgid "``env['QUERY_STRING']`` より取り出して ``urllib.parse.parse_qs`` を用いてパースできます"
msgstr "&quot;You can retrieve it from` `env [&#39;QUERY_STRING&#39;]` `and parse it using` `urllib.parse.parse_qs``"

#: ../../source/request.rst:111
msgid ""
"`forms` プロパティ: ``form-urlencoded`` 形式や ``multipart`` "
"形式で格納されているHTMLフォーム等から送られたパラメーターを受け取りたい。"
msgstr "`forms` property: I want to receive parameters sent from an HTML form stored in` `form-urlencoded`` form or` `multipart`` form."

#: ../../source/request.rst:112
msgid "リクエストボディから取り出して、 ``cgi.FieldStorage`` を用いてパースできます。"
msgstr "&quot;You can retrieve it from the request body and parse it using` `cgi.FieldStorage``."

#: ../../source/request.rst:113
msgid "`text` プロパティ: リクエストボディをバイト列ではなくテキストで受け取りたい。"
msgstr "&quot;` text` property: I want to receive the request body in text, not as a byte string."

#: ../../source/request.rst:114
msgid "`json` プロパティ: リクエストボディの内容をjson decodeして、辞書型オブジェクトとして受け取りたい。"
msgstr "&quot;` json` property: I want to json decode the contents of the request body and receive it as a dictionary type object."

#: ../../source/request.rst:116
msgid "コードはそれほど難しくないので細かい説明は省きますが、プロパティメソッドは次のようになります。"
msgstr "&quot;The code is not that difficult, so I will omit a detailed explanation, but the property method is as follows."

#: ../../source/request.rst:169
msgid "まとめ"
msgstr "&quot;Summary"

#: ../../source/request.rst:171
msgid ""
"ここではリクエストオブジェクトの扱いについて見直していきました。 WSGI "
"Environではそのままではリクエスト情報の取り出しが少し面倒でしたが、 "
"それをラップするリクエストクラスを用意することで、プロパティメソッドを通して 様々な情報を手軽に取り出せる様になりました。 "
"リクエストの次はレスポンス情報を扱いやすいAPIになおしていきましょう。"
msgstr "We reviewed the handling of request objects here. In WSGI Environ, retrieving request information was a little troublesome as it was, but by preparing a request class that wraps it, various property information can be easily retrieved through property method. Let&#39;s revise the response information to a manageable API next to the request."

