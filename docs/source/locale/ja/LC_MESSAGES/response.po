# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Masashi Shibata
# This file is distributed under the same license as the devwebframework
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr " "

#: ../../source/response.rst:2
msgid "レスポンスオブジェクト"
msgstr "&quot;Response object"

#: ../../source/response.rst:5
msgid "レスポンス情報の扱いについて"
msgstr "&quot;About handling response information"

#: ../../source/response.rst:7
msgid "リクエスト情報が簡単に取り扱えるようになったので、次はレスポンス情報の扱い方を見直します。 各エンドポイントの処理は次のように定義していました。"
msgstr "&quot;Now that request information can be handled easily, next we will review how to handle response information.The processing of each endpoint was defined as follows."

#: ../../source/response.rst:17
msgid ""
"ここで気になるのは、レスポンス情報の返し方です。 WSGIのインターフェイスでは、レスポンスステータスとレスポンスヘッダーを第2引数で受け取る "
"``start_response`` 関数により指定します。 これはFlaskやBottleのサンプルコードに比べると、少々面倒に感じます。 "
"もう少し簡単に管理できるように、Response情報をラップするクラスがあると便利かもしれません。 "
"具体的には次のように各エンドポイントの処理を記述できるようにしてみます。"
msgstr "What I care about here is how to return response information. In the WSGI interface, it is specified by the `` start_response`` function which receives the response status and the response header as the second argument. This is somewhat troublesome compared to Flask and Bottle&#39;s sample code. It might be useful to have a class wrapping the Response information so that it can be managed more easily. Specifically, we will try to describe the processing of each endpoint as follows."

#: ../../source/response.rst:33
msgid ""
"``Response`` クラスというのを追加して、レスポンスボディやヘッダー情報、ステータスコードの番号をそこに指定できるようにしました。 "
"クラスでラップしているので、デフォルトのヘッダー情報も継承を使って自由に変更することもできます。"
msgstr "We added a `` Response`` class so that we can specify the response body, header information, and status code numbers there. Since it is wrapped in the class, you can also change the default header information freely by using inheritance."

#: ../../source/response.rst:38
msgid "ヘッダー情報とステータス情報を簡単に扱う方法"
msgstr "&quot;How to handle header information and status information easily"

#: ../../source/response.rst:40
msgid ""
"Responseクラスを実装していく前に、ヘッダー情報とステータス情報を簡単に扱う方法を詳解します。 まずはステータス情報の扱いです。 "
"``start_response`` の第一引数にはステータスコードを ``200 OK`` や ``404 Not Found`` "
"のように指定しますが、 番号に対応する文字列は決まっているので、番号の指定だけで済むほうが楽なものです。 ``http.client`` "
"モジュールの ``responses`` オブジェクトには、ステータスコードの番号に対するメッセージが格納されています。"
msgstr "Before implementing the Response class, I will explain in detail how to handle header information and status information easily. First of all, it deals with status information. As the first argument of `` start_response``, you specify the status code as `` 200 OK`` or `` 404 Not Found``, but since the string corresponding to the number is fixed, It is easier to specify only by designation. The `` responses`` object of the `` http.client`` module contains a message for the status code number."

#: ../../source/response.rst:55
msgid "非常に簡単に取り出すことができました。ユーザーは ``200`` のように番号を指定してあげるだけで、次のようにステータスコードを生成できます。"
msgstr "&quot;It was possible to retrieve it very easily, the user can specify the number like` `200`` and generate a status code as follows."

#: ../../source/response.rst:68
msgid "ステータス情報の管理には ``wsgiref.headers`` モジュールの中にある ``Header`` クラスが便利です。"
msgstr "&quot;The` `Header`` class in the` `wsgiref.headers`` module is useful for managing status information."

#: ../../source/response.rst:79
msgid ""
"``add_header(key, value)`` メソッドをとおして、ヘッダー情報をセットします。 "
"またWSGIの仕様上、ヘッダー情報をキーとバリューのタプルのリストを用意する必要がありますが、 ``items()`` "
"メソッドはその形式でヘッダー情報を吐き出してくれます。"
msgstr "We set the header information through `` add_header (key, value) `` method. In addition, according to WSGI specifications, it is necessary to prepare a list of key and value tuples for header information, but the `` items () `` method spew out header information in that format."

#: ../../source/response.rst:85
msgid "Responseクラスを用意して組み込む"
msgstr "&quot;Prepare and incorporate the Response class"

#: ../../source/response.rst:87
msgid "``Response`` クラスは次のようになります。"
msgstr "&quot;The` `Response`` class looks like this:"

#: ../../source/response.rst:125
msgid ""
"デフォルトのステータスコードやコンテントタイプをクラス変数にもたせておくことにしました。 "
"ユーザーはレスポンスボディの内容を文字列で指定していますが、WSGIのインターフェイスではバイト文字列を yield "
"するイテラブルなオブジェクトとして返さなくてはいけません。 ``body`` プロパティメソッドが適切に文字列をエンコードして返してくれます。"
msgstr "We decided to put default status code and content type in the class variable. The user specifies the content of the response body as a character string, but on the WSGI interface it must return it as an iterable object that yields the byte string. The `` body`` property method properly encodes and returns the string."

#: ../../source/response.rst:129
msgid "アプリケーションにも組み込んでみましょう。"
msgstr "&quot;Let&#39;s incorporate it in the application."

#: ../../source/response.rst:144
msgid ""
"組み込みはこのように非常に簡単です。これまでとは違い ``start_response`` を各関数に渡す必要はありません。 "
"そのかわり返ってきたレスポンスオブジェクトから、ステータス情報とヘッダー情報を取り出して呼び出して上げる必要があります。"
msgstr "Built-in is thus very simple. Unlike so far, you do not need to pass `` start_response`` to each function. Instead, we need to extract and recall the status information and header information from the returned response object."

#: ../../source/response.rst:147
msgid "こうするとユーザーの定義する関数は驚くほどシンプルになります。 具体的には、次のようになりました。"
msgstr "&quot;This will make the user-defined functions surprisingly simple, specifically:"

#: ../../source/response.rst:152
msgid "いかがでしょう、FlaskやBottleを使ったことのある方には随分と見慣れた形になってきたのではないでしょうか。"
msgstr "&quot;How about you, have you used Flask or Bottle, have not it become familiar to you so much?"

#: ../../source/response.rst:156
msgid "まとめ"
msgstr "&quot;Summary"

#: ../../source/response.rst:158
msgid ""
"ここではレスポンス情報の扱いを見直しました。 Responseクラスを追加することで随分ユーザーにとって使いやすいAPIに変えることができました。"
" "
"実際にアプリケーションを作っていくにはまだまだ欲しい機能がありますが、ここまでくればまさにWebフレームワークと言えるものになってきたのではないでしょうか。"
msgstr "We reviewed the handling of response information here. By adding the Response class we were able to turn it into an API that is user friendly. There are functions that I still want to make applications actually, but it seems that it has become a web framework indeed as long as it comes to this point."

#: ../../source/response.rst:162
msgid "ここでは全部文字列をただ返していましたが、実際のユースケースではHTMLやJSONを返すことが多いでしょう。 その内容は次の節で扱っていきます。"
msgstr "&quot;Although we just returned the entire string here, in actual use cases it will return HTML and JSON in many cases We will deal with the contents in the next section."

