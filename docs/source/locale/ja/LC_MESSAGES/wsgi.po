# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Masashi Shibata
# This file is distributed under the same license as the devwebframework
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: devwebframework 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 20:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/wsgi.rst:2
msgid "WSGI について"
msgstr ""

#: ../../source/wsgi.rst:5
msgid "アプリケーション・サーバ間のやりとり"
msgstr ""

#: ../../source/wsgi.rst:7
msgid ""
"FlaskやDjangoで書かれたアプリケーションを動かすときは、当然ですがサーバーが必要になります。 本番環境で動かすときには gunicorn"
" や uWSGI が広く利用されます。"
msgstr ""

#: ../../source/wsgi.rst:12
msgid ""
"実はPythonの標準ライブラリの中にも ``wsgiref`` というサーバー実装が存在します。 "
"シングルスレッドでしか動作しないなど性能面の問題はありますが、標準ライブラリに含まれていて別途インストールする必要はないため、 "
"開発環境ではこちらが使われることも多くあります。 例えばFlaskクラスが提供する ``run()`` メソッドや、Djangoの "
"``manage.py runserver`` はデフォルトで wsgiref を利用します。"
msgstr ""

#: ../../source/wsgi.rst:18
msgid ""
"Webアプリを開発する際には、これらのサーバ上で作成したアプリケーションを動かしますが、 "
"具体的にWebサーバと私達の開発しているアプリケーションがどのようなやりとりを行っているのか、日頃の開発の中で意識することは少ないのではないでしょうか。"
" しかし、Webフレームワークを開発するとなるとどのようにやり取りが行われているのかを知っておく必要があります。"
msgstr ""

#: ../../source/wsgi.rst:27
msgid "サーバとアプリケーションの間では何かしらのやり取りが行われています。"
msgstr ""

#: ../../source/wsgi.rst:29
msgid ""
"PythonではアプリケーションとWebサーバのインタフェースとして `PEP3333 "
"<https://www.python.org/dev/peps/pep-3333/>`_ で定義された WSGI(Web Server "
"Gateway Interface)という仕様が広く利用されています。 DjangoやFlask、Bottle、Pyramid "
"などの有名なPythonのWebフレームワークはどれもWSGIの仕様に準拠しています。 ここでは私達も WSGI "
"の仕様に準拠したアプリケーションフレームワークを開発していきます。 こうすることで gunicorn や uWSGI "
"などの優れた既存のWSGIサーバーを利用できます。"
msgstr ""

#: ../../source/wsgi.rst:37
msgid ""
"`PEP3333 <https://www.python.org/dev/peps/pep-3333/>`_ "
"で定義されているはWSGIのversionは v1.0.1 ですが、 PEPではその前のバージョンとして `PEP333 (WSGI v1.0) "
"<http://www.python.org/dev/peps/pep-0333/>`_ も存在します。 PEP333 はPython "
"2を前提としていましたが、Python3から文字列の扱いが大きく変化したためそれに合わせてアップデートされ、 その他の細かい仕様変更が "
"PEP3333 には加わっています。"
msgstr ""

#: ../../source/wsgi.rst:44
msgid "WSGI (Web Server Gateway Interface)"
msgstr ""

#: ../../source/wsgi.rst:46
msgid ""
"それではWSGIの仕様について勉強していきましょう。 PEP3333 "
"を全て読むのは大変なので、実際のPythonのコードをベースに概要だけ理解していきましょう。"
msgstr ""

#: ../../source/wsgi.rst:55
msgid "このたった3行のPythonのコードはWSGIの仕様を満たしています。 それではどのような仕様だったのでしょうか？行ごとに説明していきます。"
msgstr ""

#: ../../source/wsgi.rst:58
msgid "WSGIのアプリケーションは、2つの引数を持った呼び出し可能なオブジェクトである"
msgstr ""

#: ../../source/wsgi.rst:59
msgid "第2引数として渡されたオブジェクトを呼び出し、HTTPステータスコードとヘッダ情報を渡す"
msgstr ""

#: ../../source/wsgi.rst:60
msgid "レスポンスボディとしてバイト文字列をyieldするiterableなオブジェクトを返す。"
msgstr ""

#: ../../source/wsgi.rst:62
msgid ""
"いかがでしょうか。とてもシンプルなインタフェースです。 "
"たった3行のコードですが、本当にWSGIの仕様を満たしているのであれば、gunicornやuWSGIといった "
"おなじみのWSGIサーバで動かすことができるはずですね。 実際に動かしてみましょう。 上のコードを `hello.py` "
"という名前で保存し、下記のコマンドを実行してください。"
msgstr ""

#: ../../source/wsgi.rst:78
msgid "3行のコードをgunicornで動かしてみる"
msgstr ""

#: ../../source/wsgi.rst:80
msgid ""
"動きましたか？正常に動作した場合はWebブラウザなどでアクセスすると、上のGIFアニメーションのように `Hello World` "
"と表示されるはずです。 それでは次の章でこれから作るWebフレームワークに必要な機能を考えていきましょう。"
msgstr ""

#: ../../source/wsgi.rst:84
msgid "フレームワークに求められる機能とは？"
msgstr ""

#: ../../source/wsgi.rst:86
msgid ""
"Hello Worldを表示するだけの簡単なアプリケーションであれば、フレームワークを使わずに実装することが出来ました。 "
"それではこれからWebアプリケーションを開発する上で、Webフレームワークがどのような機能を提供すると楽になるでしょうか。 "
"Webアプリケーションの開発経験がある方なら、このあたりは容易に想像がつくでしょう。 例として次のような機能があると開発が楽になりそうです。"
msgstr ""

#: ../../source/wsgi.rst:92
msgid "ルーティング"
msgstr ""

#: ../../source/wsgi.rst:94
msgid ""
"先ほどのHello WorldのアプリケーションはどこにアクセスしてもHello Worldが返ってきます。 "
"実際のWebサイトにはたくさんのページが存在し、URLやHTTPメソッドに応じてサーバー側の処理が異なります。"
msgstr ""

#: ../../source/wsgi.rst:99
msgid "リクエストオブジェクト・レスポンスオブジェクト"
msgstr ""

#: ../../source/wsgi.rst:101
msgid ""
"リクエスト情報は、WSGIアプリケーションの第一引数として提供されますが、こちらは辞書型のオブジェクトです。 "
"ここから直接、GETのクエリパラメータやその他のリクエスト情報を取り出すのは大変なため、 "
"それらの情報をうまくラップしてくれるクラスがあるといいでしょう。 "
"またレスポンスのヘッダ情報やステータス情報もうまく管理してくれるクラスがあるとよさそうです。"
msgstr ""

#: ../../source/wsgi.rst:108
msgid "HTMLテンプレート"
msgstr ""

#: ../../source/wsgi.rst:110
msgid ""
"HTMLを表示する際に、Pythonの変数を評価して埋め込めると便利です。 "
"BottleやDjangoのように、自前でテンプレートエンジンを用意してもいいかもしれませんが、Jinja2などすでに "
"広く利用されているテンプレートエンジンのローダがあると便利かもしれません。 "
"今回は一から実装はせずに、Jinja2のテンプレートエンジンのローダを用意します。"
msgstr ""

#: ../../source/wsgi.rst:117
msgid "静的ファイルの配信"
msgstr ""

#: ../../source/wsgi.rst:119
msgid ""
"CSSやJS、画像ファイルなどの静的ファイルは、本番環境の場合、 Nginx 等で返す場合が多いかもしれません。 しかし開発中や手元のパソコンでも"
" Nginx の設定をして静的ファイルを返すように設定するのは面倒なので、 フレームワークにも静的ファイルを返す機能があると開発が捗りそうです。"
msgstr ""

#: ../../source/wsgi.rst:125
msgid "今回作成するWebフレームワーク"
msgstr ""

#: ../../source/wsgi.rst:128
msgid "使い方"
msgstr ""

#: ../../source/wsgi.rst:130
msgid ""
"この資料で作成するフレームワークを使うと次のようにコードを記述出来ます。 "
"FlaskやBottleでの開発に慣れた方であれば、簡単に扱えることができるのではないでしょうか。"
msgstr ""

#: ../../source/wsgi.rst:157
msgid "全体像"
msgstr ""

#: ../../source/wsgi.rst:159
msgid "今の時点で理解できている必要はありませんが、フレームワークの全体像も載せておきます。"
msgstr ""

#: ../../source/wsgi.rst:166
msgid "フレームワークの全体像"
msgstr ""

#: ../../source/wsgi.rst:168
msgid ""
"Router や Request 、 Response "
"クラスを1つずつ実装していけば、徐々に上の図に書かれているフレームワークに近づいていきます。 "
"この資料を読み終えるころにはBottleやFlaskのようなフレームワークがどのように構成されているのかコンセプトも含めてイメージできるようになるでしょう。"
msgstr ""

#: ../../source/wsgi.rst:172
msgid "まとめ"
msgstr ""

#: ../../source/wsgi.rst:174
msgid ""
"この章ではWSGIの概要について解説しました。 "
"またWSGIの提供するインターフェイスでは足りない機能を解説し、これからつくるWebフレームワークの完成形について紹介しました。 "
"ここからは一緒にWSGIのアプリケーションフレームワークを作っていきましょう。"
msgstr ""

